// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleData.Models;

namespace VehicleData.Migrations
{
    [DbContext(typeof(VehicleTrackingContext))]
    [Migration("20210224034114_vehicleTrack")]
    partial class vehicleTrack
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VehicleData.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDT");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDT = new DateTime(2021, 2, 24, 8, 41, 13, 875, DateTimeKind.Local).AddTicks(1195),
                            Email = "azhar.teradata@gmail.com",
                            Name = "Azhar",
                            Password = "azhar123"
                        });
                });

            modelBuilder.Entity("VehicleData.Models.UserLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDT");

                    b.Property<string>("Token")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("VehicleData.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDT");

                    b.Property<string>("Model")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("RegNum")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDT = new DateTime(2021, 2, 24, 8, 41, 13, 875, DateTimeKind.Local).AddTicks(5111),
                            Model = "2009",
                            Password = "azhar123",
                            RegNum = "LEE-09-1208"
                        });
                });

            modelBuilder.Entity("VehicleData.Models.VehicleLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDT");

                    b.Property<string>("Token")
                        .IsRequired();

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleLogin");
                });

            modelBuilder.Entity("VehicleData.Models.VehiclePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Latitude");

                    b.Property<decimal>("Longitude");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehiclePosition");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Latitude = 40.73m,
                            Longitude = -74.00m,
                            TimeStamp = new DateTime(2021, 2, 24, 8, 41, 13, 875, DateTimeKind.Local).AddTicks(8122),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Latitude = 32.09m,
                            Longitude = 72.67m,
                            TimeStamp = new DateTime(2021, 2, 24, 8, 31, 13, 875, DateTimeKind.Local).AddTicks(8765),
                            VehicleId = 1
                        });
                });

            modelBuilder.Entity("VehicleData.Models.UserLogin", b =>
                {
                    b.HasOne("VehicleData.Models.User", "User")
                        .WithMany("UserLogin")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VehicleData.Models.VehicleLogin", b =>
                {
                    b.HasOne("VehicleData.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleLogin")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VehicleData.Models.VehiclePosition", b =>
                {
                    b.HasOne("VehicleData.Models.Vehicle", "Vehicle")
                        .WithMany("VehiclePosition")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
